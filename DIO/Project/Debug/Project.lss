
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000228  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000257  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000265  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011b2  00000000  00000000  000002cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ca  00000000  00000000  0000147f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000442  00000000  00000000  00001b49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00001f8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001db  00000000  00000000  00002024  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000344  00000000  00000000  000021ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002543  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000001a6  000001a6  0000021a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000258c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    00000020  00000170  00000170  000001e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.Dio_VidTogglePin 00000082  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.Dio_VidSetPinValue 00000082  000000ee  000000ee  00000162  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_fini 00000002  000001ae  000001ae  00000222  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_funcs_on_exit 00000002  000001b0  000001b0  00000224  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_simulator_exit 00000002  000001b2  000001b2  00000226  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.exit    00000016  00000190  00000190  00000204  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text._Exit   00000004  000001aa  000001aa  0000021e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
   8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
   c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  10:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  14:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  18:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  1c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  20:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  24:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  28:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  30:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  34:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  38:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  3c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  40:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  44:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  48:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  4c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  50:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 b8 00 	call	0x170	; 0x170 <main>
  64:	0c 94 c8 00 	jmp	0x190	; 0x190 <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

000001a6 <__bad_interrupt>:
 1a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.main:

00000170 <main>:
	void Dio_VidSetPinDirection(DIO_ChannelsTypes_t DIO_ChannelA6);
	void Dio_VidSetPinDirection(DIO_ChannelsTypes_t DIO_ChannelB7);

    while(1)
    {
	Dio_VidSetPinValue(DIO_ChannelA4);
 170:	84 e0       	ldi	r24, 0x04	; 4
 172:	0e 94 77 00 	call	0xee	; 0xee <Dio_VidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 176:	2f e7       	ldi	r18, 0x7F	; 127
 178:	8a e1       	ldi	r24, 0x1A	; 26
 17a:	96 e0       	ldi	r25, 0x06	; 6
 17c:	21 50       	subi	r18, 0x01	; 1
 17e:	80 40       	sbci	r24, 0x00	; 0
 180:	90 40       	sbci	r25, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <main+0xc>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0x16>
 186:	00 00       	nop
	_delay_ms(2000);
    Dio_VidTogglePin(DIO_ChannelA5);
 188:	85 e0       	ldi	r24, 0x05	; 5
 18a:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
 18e:	f0 cf       	rjmp	.-32     	; 0x170 <main>

Disassembly of section .text.Dio_VidTogglePin:

0000006c <Dio_VidTogglePin>:
	return u8ValueRead;
	
}
void Dio_VidTogglePin(DIO_ChannelsTypes_t ChannelId)
{
	DIO_PortTypes_t Portx = ChannelId/8;
  6c:	98 2f       	mov	r25, r24
  6e:	96 95       	lsr	r25
  70:	96 95       	lsr	r25
  72:	96 95       	lsr	r25
	DIO_ChannelsTypes_t Pinx = ChannelId%8;
  74:	87 70       	andi	r24, 0x07	; 7
	
	switch(Portx)
  76:	91 30       	cpi	r25, 0x01	; 1
  78:	99 f0       	breq	.+38     	; 0xa0 <Dio_VidTogglePin+0x34>
  7a:	28 f0       	brcs	.+10     	; 0x86 <Dio_VidTogglePin+0x1a>
  7c:	92 30       	cpi	r25, 0x02	; 2
  7e:	e9 f0       	breq	.+58     	; 0xba <Dio_VidTogglePin+0x4e>
  80:	93 30       	cpi	r25, 0x03	; 3
  82:	41 f1       	breq	.+80     	; 0xd4 <Dio_VidTogglePin+0x68>
  84:	08 95       	ret
	{
		case DIO_PortA :
		TOGGLE_BIT(PORTA_REG,Pinx);
  86:	4b b3       	in	r20, 0x1b	; 27
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	30 e0       	ldi	r19, 0x00	; 0
  8c:	b9 01       	movw	r22, r18
  8e:	02 c0       	rjmp	.+4      	; 0x94 <Dio_VidTogglePin+0x28>
  90:	66 0f       	add	r22, r22
  92:	77 1f       	adc	r23, r23
  94:	8a 95       	dec	r24
  96:	e2 f7       	brpl	.-8      	; 0x90 <Dio_VidTogglePin+0x24>
  98:	cb 01       	movw	r24, r22
  9a:	84 27       	eor	r24, r20
  9c:	8b bb       	out	0x1b, r24	; 27
		break;
  9e:	08 95       	ret
		case DIO_PortB :
		TOGGLE_BIT(PORTB_REG,Pinx);
  a0:	48 b3       	in	r20, 0x18	; 24
  a2:	21 e0       	ldi	r18, 0x01	; 1
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	b9 01       	movw	r22, r18
  a8:	02 c0       	rjmp	.+4      	; 0xae <Dio_VidTogglePin+0x42>
  aa:	66 0f       	add	r22, r22
  ac:	77 1f       	adc	r23, r23
  ae:	8a 95       	dec	r24
  b0:	e2 f7       	brpl	.-8      	; 0xaa <Dio_VidTogglePin+0x3e>
  b2:	cb 01       	movw	r24, r22
  b4:	84 27       	eor	r24, r20
  b6:	88 bb       	out	0x18, r24	; 24
		break;
  b8:	08 95       	ret
		case DIO_PortC :
		TOGGLE_BIT(PORTC_REG,Pinx);
  ba:	45 b3       	in	r20, 0x15	; 21
  bc:	21 e0       	ldi	r18, 0x01	; 1
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	b9 01       	movw	r22, r18
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <Dio_VidTogglePin+0x5c>
  c4:	66 0f       	add	r22, r22
  c6:	77 1f       	adc	r23, r23
  c8:	8a 95       	dec	r24
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <Dio_VidTogglePin+0x58>
  cc:	cb 01       	movw	r24, r22
  ce:	84 27       	eor	r24, r20
  d0:	85 bb       	out	0x15, r24	; 21
		break;
  d2:	08 95       	ret
		case DIO_PortD :
		TOGGLE_BIT(PORTD_REG,Pinx);
  d4:	42 b3       	in	r20, 0x12	; 18
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	b9 01       	movw	r22, r18
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <Dio_VidTogglePin+0x76>
  de:	66 0f       	add	r22, r22
  e0:	77 1f       	adc	r23, r23
  e2:	8a 95       	dec	r24
  e4:	e2 f7       	brpl	.-8      	; 0xde <Dio_VidTogglePin+0x72>
  e6:	cb 01       	movw	r24, r22
  e8:	84 27       	eor	r24, r20
  ea:	82 bb       	out	0x12, r24	; 18
  ec:	08 95       	ret

Disassembly of section .text.Dio_VidSetPinValue:

000000ee <Dio_VidSetPinValue>:
	}

}
void Dio_VidSetPinValue(DIO_ChannelsTypes_t ChannelId)
{
	DIO_PortTypes_t Portx = ChannelId/8;
  ee:	98 2f       	mov	r25, r24
  f0:	96 95       	lsr	r25
  f2:	96 95       	lsr	r25
  f4:	96 95       	lsr	r25
	DIO_ChannelsTypes_t Pinx = ChannelId%8;
  f6:	87 70       	andi	r24, 0x07	; 7
	
	switch(Portx)
  f8:	91 30       	cpi	r25, 0x01	; 1
  fa:	99 f0       	breq	.+38     	; 0x122 <Dio_VidSetPinValue+0x34>
  fc:	28 f0       	brcs	.+10     	; 0x108 <Dio_VidSetPinValue+0x1a>
  fe:	92 30       	cpi	r25, 0x02	; 2
 100:	e9 f0       	breq	.+58     	; 0x13c <Dio_VidSetPinValue+0x4e>
 102:	93 30       	cpi	r25, 0x03	; 3
 104:	41 f1       	breq	.+80     	; 0x156 <Dio_VidSetPinValue+0x68>
 106:	08 95       	ret
	{
		case DIO_PortA :
		SET_BIT(PORTA_REG,Pinx);
 108:	4b b3       	in	r20, 0x1b	; 27
 10a:	21 e0       	ldi	r18, 0x01	; 1
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	b9 01       	movw	r22, r18
 110:	02 c0       	rjmp	.+4      	; 0x116 <Dio_VidSetPinValue+0x28>
 112:	66 0f       	add	r22, r22
 114:	77 1f       	adc	r23, r23
 116:	8a 95       	dec	r24
 118:	e2 f7       	brpl	.-8      	; 0x112 <Dio_VidSetPinValue+0x24>
 11a:	cb 01       	movw	r24, r22
 11c:	84 2b       	or	r24, r20
 11e:	8b bb       	out	0x1b, r24	; 27
		break;
 120:	08 95       	ret
		case DIO_PortB :
		SET_BIT(PORTB_REG,Pinx);
 122:	48 b3       	in	r20, 0x18	; 24
 124:	21 e0       	ldi	r18, 0x01	; 1
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	b9 01       	movw	r22, r18
 12a:	02 c0       	rjmp	.+4      	; 0x130 <Dio_VidSetPinValue+0x42>
 12c:	66 0f       	add	r22, r22
 12e:	77 1f       	adc	r23, r23
 130:	8a 95       	dec	r24
 132:	e2 f7       	brpl	.-8      	; 0x12c <Dio_VidSetPinValue+0x3e>
 134:	cb 01       	movw	r24, r22
 136:	84 2b       	or	r24, r20
 138:	88 bb       	out	0x18, r24	; 24
		break;
 13a:	08 95       	ret
		case DIO_PortC :
		SET_BIT(PORTC_REG,Pinx);
 13c:	45 b3       	in	r20, 0x15	; 21
 13e:	21 e0       	ldi	r18, 0x01	; 1
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	b9 01       	movw	r22, r18
 144:	02 c0       	rjmp	.+4      	; 0x14a <Dio_VidSetPinValue+0x5c>
 146:	66 0f       	add	r22, r22
 148:	77 1f       	adc	r23, r23
 14a:	8a 95       	dec	r24
 14c:	e2 f7       	brpl	.-8      	; 0x146 <Dio_VidSetPinValue+0x58>
 14e:	cb 01       	movw	r24, r22
 150:	84 2b       	or	r24, r20
 152:	85 bb       	out	0x15, r24	; 21
		break;
 154:	08 95       	ret
		case DIO_PortD :
		SET_BIT(PORTD_REG,Pinx);
 156:	42 b3       	in	r20, 0x12	; 18
 158:	21 e0       	ldi	r18, 0x01	; 1
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	b9 01       	movw	r22, r18
 15e:	02 c0       	rjmp	.+4      	; 0x164 <Dio_VidSetPinValue+0x76>
 160:	66 0f       	add	r22, r22
 162:	77 1f       	adc	r23, r23
 164:	8a 95       	dec	r24
 166:	e2 f7       	brpl	.-8      	; 0x160 <Dio_VidSetPinValue+0x72>
 168:	cb 01       	movw	r24, r22
 16a:	84 2b       	or	r24, r20
 16c:	82 bb       	out	0x12, r24	; 18
 16e:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000001ae <_fini>:
 1ae:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000001b0 <__funcs_on_exit>:
 1b0:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000001b2 <__simulator_exit>:
 1b2:	08 95       	ret

Disassembly of section .text.exit:

00000190 <exit>:
 190:	ec 01       	movw	r28, r24
 192:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__funcs_on_exit>
 196:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_fini>
 19a:	ce 01       	movw	r24, r28
 19c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <__simulator_exit>
 1a0:	ce 01       	movw	r24, r28
 1a2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_Exit>

Disassembly of section .text._Exit:

000001aa <_Exit>:
 1aa:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
